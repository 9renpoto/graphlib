#sidebar
    p
        a(href="#title") Introduction

    p
        a(href="#Graph") Graph
        :markdown
            - [constructor](#Graph-constructor)
            - [order](#Graph-order)
            - [size](#Graph-size)
            - [isDirected](#Graph-isDirected)
            - [graph](#Graph-graph)
            - [hasNode](#Graph-hasNode)
            - [node](#Graph-node)
            - [nodes](#Graph-nodes)
            - [eachNode](#Graph-eachNode)
            - [neighbors](#Graph-neighbors)
            - [hasEdge](#Graph-hasEdge)
            - [edge](#Graph-edge)
            - [edges](#Graph-edges)
            - [eachEdge](#Graph-eachEdge)
            - [incidentNodes](#Graph-incidentNodes)
            - [incidentEdges](#Graph-incidentEdges)
            - [equals](#Graph-equals)
            - [toString](#Graph-toString)
            - [addNode](#Graph-addNode)
            - [delNode](#Graph-delNode)
            - [addEdge](#Graph-addEdge)
            - [delEdge](#Graph-delEdge)
            - [toDigraph](#Graph-toDigraph)

    p
        a(href="#Digraph") Digraph
        :markdown
            - [constructor](#Digraph-constructor)
            - [order](#Digraph-order)
            - [size](#Digraph-size)
            - [isDirected](#Digraph-isDirected)
            - [graph](#Digraph-graph)
            - [hasNode](#Digraph-hasNode)
            - [node](#Digraph-node)
            - [nodes](#Digraph-nodes)
            - [eachNode](#Digraph-eachNode)
            - [successors](#Digraph-successors)
            - [predecessors](#Digraph-predecessors)
            - [neighbors](#Digraph-neighbors)
            - [sources](#Digraph-sources)
            - [sinks](#Digraph-sinks)
            - [hasEdge](#Digraph-hasEdge)
            - [edge](#Digraph-edge)
            - [edges](#Digraph-edges)
            - [eachEdge](#Digraph-eachEdge)
            - [source](#Digraph-source)
            - [target](#Digraph-target)
            - [incidentNodes](#Digraph-incidentNodes)
            - [inEdges](#Digraph-inEdges)
            - [outEdges](#Digraph-outEdges)
            - [incidentEdges](#Digraph-incidentEdges)
            - [equals](#Digraph-equals)
            - [toString](#Digraph-toString)
            - [addNode](#Digraph-addNode)
            - [delNode](#Digraph-delNode)
            - [addEdge](#Digraph-addEdge)
            - [delEdge](#Digraph-delEdge)
            - [toGraph](#Digraph-toGraph)

    p
        a(href="#alg") alg
        :markdown
            - [topsort](#alg-topsort)
            - [isAcyclic](#alg-isAcyclic)
            - [findCycles](#alg-findCycles)
            - [dijkstra](#alg-dijkstra)
            - [dijkstraAll](#alg-dijkstraAll)
            - [floydWarshall](#alg-floydWarshall)
            - [tarjan](#alg-tarjan)
            - [components](#alg-components)
            - [prim](#alg-prim)
