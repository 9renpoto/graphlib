h2#Graph Graph
:markdown
    The `Graph` class represents an [undirected][] [multigraph][].

    Subsequent examples in this section assume that `Graph` has been required
    as follows:

    ```js
    var Graph = require("graphlib").Graph;
    var graph = new Graph();
    ```

    [undirected]: https://en.wikipedia.org/wiki/Undirected_graph
    [multigraph]: https://en.wikipedia.org/wiki/Multigraph

h3#Graph-constructor new Graph()
:markdown
    Constructs a new empty `Graph`.

h3#Graph-order graph.order()
:markdown
    Returns the number of nodes in the graph. For example:

    ```js
    graph.order();
    // => 0

    graph.addNode(1);
    graph.addNode(2);

    graph.order();
    // => 2
    ```

h3#Graph-size graph.size()
:markdown
    Returns the number of edges in the graph. For example:

    ```js
    graph.size();
    // => 0

    graph.addNode(1);
    graph.addNode(2);
    graph.addEdge(null, 1, 2);

    graph.size();
    // => 1
    ```

h3#Graph-isDirected graph.isDirected()
:markdown
    Always returns `false` for `Graph` because it creates undirected graphs.

h3#Graph-graph graph.graph([value])
:markdown
    The `graph` function provides a mechansim to get and set some user-defined
    information on the graph object itself. With no arguments `graph` returns
    the currently set value. With one argument `graph` replaces the current
    value on the graph with `value`. The initial value for the graph is
    `undefined`.

    ```js
    graph.graph();
    // => undefined
    
    graph.graph("Some graph value");
    graph.graph();
    // => "Some graph value" 
    ```

h3#Graph-hasNode graph.hasNode(u)
:markdown
    Returns `true` if the node with the id `u` is a member of the graph and
    `false` if not.

    ```js
    graph.hasNode(1);
    // => false

    graph.addNode(1);
    graph.hasNode(1);
    // => true
    ```

h3#Graph-node graph.node(u, [value])
:markdown
    The `node` function provides a mechanism to get and set some user-defined
    information on an individual node. With one argument this function returns
    the value currently assigned to the node with the id `u`. With two
    arguments this function replaces the current value of the node `u` with
    `value`. The initial value for nodes is `undefined`.

    If there is no node `u` in the graph this function will throw an `Error`.

    ```js
    graph.addNode(1);
    graph.node(1);
    // => undefined

    graph.node(1, "Some node value");
    graph.node(1);
    // => "Some node value"

    graph.node(2);
    // throws an Error
    ```

h3#Graph-nodes graph.nodes()
:markdown
    Returns the ids of all nodes in this graph. Use
    [`graph.node(u)`](#Graph-node) to get the value for a specific node.

    ```js
    graph.nodes();
    // => []

    graph.addNode(1);
    graph.addNode(2);

    graph.nodes()
    // => [1, 2]
    ```

h3#Graph-eachNode graph.eachNode(f)
:markdown
    Applies the function `f(u, value)` to each node in the graph in arbitrary
    order, where `u` is the id of the node and `value` is its currently
    assigned value.

    ```js
    graph.addNode(1, "label-1");
    graph.addNode(2, "label-2");

    var results = {};
    graph.eachNode(function(u, value) {
        results[u] = value;
    });

    results
    // => { "1": "label-1", "2": "label-2" }
    ```

h3#Graph-neighbors graph.neighbors(u)
:markdown
    Returns the ids of all nodes that are adjacent to the node with the id `u`.
    If `u` is not a member of the graph this function throws an `Error`.

    ```js
    graph.addNode(1);
    graph.addNode(2);
    graph.addEdge(null, 1, 2);

    graph.neighbors(1);
    // => [2]

    graph.neighbors(2);
    // => [1]
    ```

h3#Graph-hasEdge graph.hasEdge(e)
:markdown
    Returns `true` if an edge with the id `e` exists in the graph or `false` if
    not.

    ```js
    graph.hasEdge("A");
    // => false

    graph.addNode(1);
    graph.addNode(2);
    graph.addEdge("A", 1, 2);
    graph.hasEdge("A");
    // => true
    ```

h3#Graph-edge graph.edge(e, [value])
:markdown
    The `edge` function provides a mechanism to get and set some user-defined
    information on an individual edge. With one argument this function returns
    the value currently assigned to the edge with the id `e`. With two
    arguments this function replaces the current value of the edge `e` with
    `value`. The initial value for edges is `undefined`.

    If there is no edge `e` in the graph this function will throw an `Error`.

    ```js
    graph.addNode(1);
    graph.addNode(2);
    graph.edge("A", 1, 2);
    // => undefined

    graph.edge("A", "Some edge value");
    graph.edge("A");
    // => "Some edge value"

    graph.edge("B");
    // throws an Error
    ```

h3#Graph-edges graph.edges()
:markdown
    Returns the ids of all edges in this graph. Use
    [`graph.edge(e)`](#Graph-edge) to get the value for a specific edge.

    ```js
    graph.addNode(1);
    graph.addNode(2);
    graph.addEdge("A", 1, 2);
    graph.addEdge("B", 1, 2);
    graph.edges();
    // => ["A", "B"]
    ```
    
h3#Graph-eachEdge graph.eachEdge(f)
:markdown
    Applies the function `f(e, u, v, value)` to each edge in the graph in
    arbitrary order, where `e` is the edge's id, `u` and `v` are the incident
    node ids, and `value` it the value assigned to the edge. Note that the
    order of `u` and `v` is not significant since this is an undirected graph.

    ```js
    graph.addNode(1);
    graph.addNode(2);
    graph.addEdge("A", 1, 2, "A-label");
    graph.addEdge("B", 2, 1, "B-label");

    var results = {};
    graph.eachEdge(function(e, u, v, label) {
        results[e] = "U: " + u + " V: " + v + " L: " + label;
    });

    results
    // => { "A": "U: 1 V: 2 L: A-label",
    //      "B": "U: 2 V: 1 L: B-label" }
    ```

h3#Graph-incidentNodes graph.incidentNodes(e)
:markdown
    Returns the nodes that are a part of the edge `e` in a 2-element array.
    There is no significance to the order in which the nodes appear in the
    array.

    ```js
    graph.addNode(1);
    graph.addNode(2);
    graph.addEdge("A", 1, 2);
    graph.incidentNodes("A");
    // => [ 1, 2 ]
    ```

h3#Graph-incidentEdges graph.incidentEdges(u, [v])
:markdown
    Returns an arrray of ids for all edges in the graph that are incident on
    the node `u`. If the node `u` is not in the graph this function raises
    an `Error`.

    Optionally the id of another node, `v`, may be be specified. This causes
    the results to be filtered such that only edges between `u` and `v` are
    included in the returned array. If the node `v` is specified but not a
    member of the graph this function raises an `Error`.

    ```js
    graph.addNode(1);
    graph.addNode(2);
    graph.addNode(3);
    graph.addEdge("A", 1, 2);
    graph.addEdge("B", 2, 3);
    graph.addEdge("C", 3, 1);
    graph.addEdge("D", 3, 2);

    graph.incidentEdges(3);
    // => [ "B", "C", "D" ]

    graph.inEdges(3, 2);
    // => [ "B", "D" ]
    ```

h3#Graph-equals graph.equals(other)
:markdown
    Returns `true` if `other` has the same set of nodes and edges, and the
    values of those nodes and edges are equal (`===`). Returns `false`
    otherwise.

h3#Graph-toString graph.toString()
:markdown
    Returns a `String` representation of this graph for debugging purposes. The
    format of this string is arbitrary and subject to change at any time.

h3#Graph-addNode graph.addNode(u, [value])
:markdown
    Adds a new node with the id `u` to the graph. The node `u` is assigned the
    value of `value` if it is specified. Otherwise it defaults to the value
    `undefined`. If a node with the id `u` is already a member of the graph
    this function throws an `Error`.

h3#Graph-delNode graph.delNode(u)
:markdown
    Removes a node from the graph that has the id `u`. Any edges incident on
    the node `u` are also removed. If the graph does not contain a node `u`
    then this function will raise an `Error`.

h3#Graph-addEdge graph.addEdge([e], u, v, [value])
:markdown
    Adds a new edge to the graph with the id `e` between a node with the id `u`
    and a node with the id `v`. The edge `e` is assigned the value of `value`
    if it is specified. Otherwise it defaults to the value `undefined`. If `e`
    is `null` the graph will assign an arbitrary id to the edge. This function
    will throw an `Error` if `u` or `v` are not members of this graph or if `e`
    is already a member of this graph.

h3#Graph-delEdge graph.delEdge(e)
:markdown
    Removes an edge in the graph with the id `e`. If no edge in the graph has
    the id `u` this function will thrown an `Error`.

h3#Graph-copy graph.copy()
:markdown
    Creates a new graph that contains all of the nodes and edges from this
    graph.

h3#Graph-filterNodes graph.filterNodes(f)
:markdown
    Applies the function `f(u, value)` to each node in this graph and returns a
    new graph that only includes those nodes for which `f` returns `true`.
    Edges that have both incident nodes in the new graph are also copied to the
    new graph.

    ```js
    function filter(u) { return u === 1 || u === 2; }

    graph.addNode(1, "node-1");
    graph.addNode(2, "node-2");
    graph.addNode(3, "node-3");
    graph.addEdge(null, 1, 2, "edge-1-2");
    graph.addEdge(null, 2, 3, "edge-2-3");

    var subgraph = graph.filterNodes(filter);
    subgraph.nodes();
    // => [1, 2]

    subgraph.node(1);
    // => "node-1"

    subgraph.neighbors(2);
    // => [1]
    ```

h3#Graph-toDigraph graph.toDigraph()
:markdown
    Returns a new directed graph using the nodes and edge from this graph. The
    new graph will have the same nodes, but will have twice the number of
    edges: each edge is split into edges pointing in opposite directions. Edge
    ids, consequently, are not preserved by this transformation.

    ```js
    graph.addNode(1);
    graph.addNode(2);
    graph.addNode(3);
    graph.addEdge(null, 1, 2);
    graph.addEdge(null, 2, 3);
    graph.size();
    // => 3

    var digraph = graph.toDigraph();
    digraph instanceof Digraph;
    // => true

    digraph.nodes();
    // => [ 1, 2, 3 ]

    digraph.size();
    // => 6 /* twice the number of edges */

    digraph.successors(2);
    // => [ 1, 3 ]

    digraph.edges();
    // => [ "_ANON-1", "_ANON-2", "_ANON-3", "_ANON-4" ]
    ```
